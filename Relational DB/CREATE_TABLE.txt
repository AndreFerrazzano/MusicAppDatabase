CREATE TABLE USER (
mail VARCHAR(255) PRIMARY KEY,
username VARCHAR(50) NOT NULL UNIQUE,
password VARCHAR(255),
registrationDate DATE,
isPremium BOOLEAN NOT NULL
);

CREATE TABLE SONG (
id INT AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(255) NOT NULL,
duration INT,
publicationDate DATE,
text VARCHAR(255)
);

CREATE TABLE PODCAST (
id INT AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(255) NOT NULL,
duration INT,
publicationDate DATE
);

CREATE TABLE ARTIST (
id INT AUTO_INCREMENT PRIMARY KEY,
stageName VARCHAR(255) NOT NULL,
name VARCHAR(255),
surname VARCHAR(255),
dateOfBirth DATE,
recordLabel VARCHAR(255)
);

CREATE TABLE AUTHOR (
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(255) NOT NULL,
surname VARCHAR(255) NOT NULL,
productionLabel VARCHAR(255)
);

CREATE TABLE CATEGORY (
name VARCHAR(255) PRIMARY KEY,
description VARCHAR(255)
);

CREATE TABLE PLAYLIST (
id INT AUTO_INCREMENT PRIMARY KEY,
title VARCHAR(255) NOT NULL,
creationDate DATE,
isPublic BOOLEAN,
mailUser VARCHAR(255) NOT NULL,
FOREIGN KEY (mailUser) REFERENCES USER(mail)
);

CREATE TABLE LISTEN (
id INT AUTO_INCREMENT PRIMARY KEY,
date DATE,
finished BOOLEAN,
mailUser VARCHAR(255) NOT NULL,
idSong INT,
idPodcast INT,
FOREIGN KEY (mailUser) REFERENCES USER(mail),
FOREIGN KEY (idSong) REFERENCES SONG(id),
FOREIGN KEY (idPodcast) REFERENCES PODCAST(id),
CONSTRAINT EitherForeignKeyIsNull CHECK (
	(idSong IS NULL AND idPodcast IS NOT NULL) OR
	(idSong IS NOT NULL AND idPodcast IS NULL))
);

CREATE TABLE PRODUCED_BY (
idArtist INT,
idSong INT,
PRIMARY KEY (idArtist, idSong),
FOREIGN KEY (idArtist) REFERENCES ARTIST(id),
FOREIGN KEY (idSong) REFERENCES SONG(id)
);

CREATE TABLE CONDUCTED_BY(
idAuthor INT,
idPodcast INT,
PRIMARY KEY (idAuthor, idPodcast),
FOREIGN KEY (idAuthor) REFERENCES AUTHOR(id),
FOREIGN KEY (idPodcast) REFERENCES PODCAST(id)
);

CREATE TABLE FAVOURITE_SONG (
idSong INT,
mailUser VARCHAR(255),
favouriteDate DATE,
PRIMARY KEY (idSong, mailUser),
FOREIGN KEY (idSong) REFERENCES SONG(id),
FOREIGN KEY (mailUser) REFERENCES USER(mail)
);

CREATE TABLE FAVOURITE_SONG (
idSong INT,
mailUser VARCHAR(255),
favouriteDate DATE,
PRIMARY KEY (idSong, mailUser),
FOREIGN KEY (idSong) REFERENCES SONG(id),
FOREIGN KEY (mailUser) REFERENCES USER(mail)
);

CREATE TABLE ADDED_SONG_TO_PLAYLIST (
idSong INT,
idPlaylist INT,
addedDate DATE,
PRIMARY KEY (idSong, idPlaylist),
FOREIGN KEY (idSong) REFERENCES SONG(id),
FOREIGN KEY (idPlaylist) REFERENCES PLAYLIST(id)
);

CREATE TABLE GROUPED_INTO (
idSong INT,
nameCategory VARCHAR(255),
PRIMARY KEY (idSong, nameCategory),
FOREIGN KEY (idSong) REFERENCES SONG(id),
FOREIGN KEY (nameCategory) REFERENCES CATEGORY(name)
);

